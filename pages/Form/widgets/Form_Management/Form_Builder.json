{
  "backgroundColor": "#FFFFFF",
  "borderColor": "#E0DEDE",
  "borderRadius": "{{appsmith.theme.borderRadius.appBorderRadius}}",
  "borderWidth": "1",
  "bottomRow": 120,
  "boxShadow": "{{appsmith.theme.boxShadow.appBoxShadow}}",
  "defaultModel": "{{{\n  \"id\": formTable.selectedRow?.id || null,\n  \"name\": formTable.selectedRow?.name || \"\",\n  \"status\": formTable.selectedRow?.status || \"draft\",\n  \"json\": formTable.selectedRow?.json || \"[]\"\n}}}",
  "dynamicBindingPathList": [
    {
      "key": "theme"
    },
    {
      "key": "borderRadius"
    },
    {
      "key": "boxShadow"
    },
    {
      "key": "defaultModel"
    }
  ],
  "dynamicHeight": "AUTO_HEIGHT",
  "dynamicPropertyPathList": [],
  "dynamicTriggerPathList": [
    {
      "key": "saveFormData"
    }
  ],
  "events": [
    "saveFormData"
  ],
  "isCanvas": false,
  "isLoading": false,
  "isSearchWildcard": true,
  "isVisible": true,
  "key": "1wl4uwlhfe",
  "leftColumn": 0,
  "maxDynamicHeight": 9000,
  "minDynamicHeight": 4,
  "mobileBottomRow": 40,
  "mobileLeftColumn": 15,
  "mobileRightColumn": 38,
  "mobileTopRow": 10,
  "needsErrorInfo": false,
  "originalBottomRow": 121,
  "originalTopRow": 10,
  "parentColumnSpace": 6.84375,
  "parentId": "cyjn0snd5w",
  "parentRowSpace": 10,
  "renderMode": "CANVAS",
  "rightColumn": 64,
  "saveFormData": "{{form_builder.saveForm(id, name, status, json);}}",
  "shouldScrollContents": true,
  "srcDoc": {
    "css": "",
    "html": "<div id=\"root\"></div>",
    "js": "function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport React, { useState } from 'https://cdn.jsdelivr.net/npm/react@18.2.0/+esm';\nimport reactDom from 'https://cdn.jsdelivr.net/npm/react-dom@18.2.0/+esm';\nimport { Button, Input, Card, Form, Switch, Select, Collapse } from 'https://cdn.jsdelivr.net/npm/antd@5.11.1/+esm';\nimport { DragDropContext, Droppable, Draggable } from 'https://cdn.jsdelivr.net/npm/react-beautiful-dnd@13.1.1/+esm';\nconst {\n  Panel\n} = Collapse;\n\n// Templates for input types\nconst fieldTemplates = {\n  \"Checkbox\": {\n    label: \"Checkbox\",\n    description: \"\",\n    defaultValue: null,\n    required: true\n  },\n  \"Currency\": {\n    label: \"Currency\",\n    description: \"\",\n    min: 0,\n    max: null,\n    defaultValue: 0,\n    required: true\n  },\n  \"Date\": {\n    label: \"Date\",\n    description: \"\",\n    min: null,\n    max: null,\n    defaultValue: null,\n    required: true\n  },\n  \"Time\": {\n    label: \"Time\",\n    description: \"\",\n    min: null,\n    max: null,\n    defaultValue: null,\n    required: true\n  },\n  \"Email\": {\n    label: \"Email\",\n    description: \"\",\n    regex: \"\",\n    defaultValue: null,\n    required: true\n  },\n  \"Multiselect Dropdown\": {\n    label: \"Multiselect Dropdown\",\n    options: [\"Option 1\", \"Option 2\"],\n    defaultValue: null,\n    required: true\n  },\n  \"Multi-line Text\": {\n    label: \"Multi-line Text\",\n    description: \"\",\n    defaultValue: null,\n    required: true\n  },\n  \"Number\": {\n    label: \"Number\",\n    description: \"\",\n    min: 0,\n    max: null,\n    defaultValue: null,\n    regex: \"\",\n    required: true\n  },\n  \"Password\": {\n    label: \"Password\",\n    description: \"\",\n    required: true\n  },\n  \"Phone Number\": {\n    label: \"Phone\",\n    description: \"\",\n    required: true\n  },\n  \"Radio Button\": {\n    label: \"Radio Button\",\n    options: [\"Option 1\", \"Option 2\"],\n    defaultValue: null,\n    required: true\n  },\n  \"Select Dropdown\": {\n    label: \"Select Dropdown\",\n    options: [\"Option 1\", \"Option 2\"],\n    defaultValue: null,\n    required: true\n  },\n  \"Single-line Text\": {\n    label: \"Single-line Text\",\n    description: \"\",\n    regex: \"\",\n    defaultValue: null,\n    required: true\n  },\n  \"Subform\": {\n    label: \"Subform\",\n    min: 1,\n    max: null,\n    subfields: []\n  },\n  \"File Upload\": {\n    label: \"File Upload\",\n    description: \"\",\n    min: 0,\n    max: null,\n    maxFileSize: null,\n    fileTypes: [],\n    required: true\n  },\n  \"URL\": {\n    label: \"URL\",\n    description: \"\",\n    regex: \"\",\n    defaultValue: null,\n    required: true\n  },\n  \"Title\": {\n    label: \"Title\",\n    description: \"\",\n    required: false\n  },\n  \"Custom Code\": {\n    label: \"Custom Code\",\n    description: \"\",\n    code: \"\",\n    required: false\n  }\n};\nconst InputTypeSettings = ({\n  field,\n  onUpdate,\n  parentId\n}) => {\n  const updateField = (key, value) => onUpdate(field.id, key, value, parentId);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Form.Item, {\n    label: \"Label\"\n  }, /*#__PURE__*/React.createElement(Input, {\n    value: field.label,\n    onChange: e => updateField(\"label\", e.target.value)\n  })), /*#__PURE__*/React.createElement(Form.Item, {\n    label: \"Description\"\n  }, /*#__PURE__*/React.createElement(Input.TextArea, {\n    value: field.description || \"\",\n    onChange: e => updateField(\"description\", e.target.value)\n  })), /*#__PURE__*/React.createElement(Form.Item, {\n    label: \"Required\"\n  }, /*#__PURE__*/React.createElement(Switch, {\n    checked: field.required,\n    onChange: checked => updateField(\"required\", checked)\n  })), [\"Number\", \"Currency\", \"Single-line Text\", \"Email\", \"Checkbox\", \"Radio Button\", \"Select Dropdown\", \"Multiselect Dropdown\"].includes(field.type) && /*#__PURE__*/React.createElement(Form.Item, {\n    label: \"Default Value\"\n  }, /*#__PURE__*/React.createElement(Input, {\n    type: [\"Number\", \"Currency\"].includes(field.type) ? \"number\" : \"text\",\n    value: field.defaultValue || \"\",\n    onChange: e => updateField(\"defaultValue\", e.target.value)\n  })), [\"Date\", \"Time\"].includes(field.type) && /*#__PURE__*/React.createElement(Form.Item, {\n    label: \"Default Value\"\n  }, /*#__PURE__*/React.createElement(Input, {\n    type: [\"Date\"].includes(field.type) ? \"date\" : \"time\",\n    value: field.defaultValue || \"\",\n    onChange: e => updateField(\"defaultValue\", e.target.value)\n  })), [\"Number\", \"Currency\", \"Date\", \"Time\"].includes(field.type) && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Form.Item, {\n    label: \"Min Value\"\n  }, /*#__PURE__*/React.createElement(Input, {\n    type: field.type === \"Date\" ? \"date\" : field.type === \"Time\" ? \"time\" : \"number\",\n    value: field.min || \"\",\n    onChange: e => updateField(\"min\", e.target.value)\n  })), /*#__PURE__*/React.createElement(Form.Item, {\n    label: \"Max Value\"\n  }, /*#__PURE__*/React.createElement(Input, {\n    type: field.type === \"Date\" ? \"date\" : field.type === \"Time\" ? \"time\" : \"number\",\n    value: field.max || \"\",\n    onChange: e => updateField(\"max\", e.target.value)\n  }))), field.type === \"Custom Code\" && /*#__PURE__*/React.createElement(Form.Item, {\n    label: \"Custom Code\"\n  }, /*#__PURE__*/React.createElement(Input.TextArea, {\n    rows: 5,\n    placeholder: \"Enter your custom code here\",\n    value: field.code || \"\",\n    onChange: e => updateField(\"code\", e.target.value)\n  })), [\"Email\", \"Single-line Text\", \"Number\", \"URL\"].includes(field.type) && /*#__PURE__*/React.createElement(Form.Item, {\n    label: \"Regex\"\n  }, /*#__PURE__*/React.createElement(Input, {\n    value: field.regex || \"\",\n    onChange: e => updateField(\"regex\", e.target.value)\n  })), [\"Select Dropdown\", \"Multiselect Dropdown\", \"Radio Button\", \"Checkbox\"].includes(field.type) && /*#__PURE__*/React.createElement(Form.Item, {\n    label: \"Options (Comma Separated)\"\n  }, /*#__PURE__*/React.createElement(Input, {\n    value: field.options?.join(\",\") || \"\",\n    onChange: e => updateField(\"options\", e.target.value.split(\",\"))\n  })), field.type === \"File Upload\" && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Form.Item, {\n    label: \"Min Files\"\n  }, /*#__PURE__*/React.createElement(Input, {\n    type: \"number\",\n    value: field.min || \"\",\n    onChange: e => updateField(\"min\", e.target.value)\n  })), /*#__PURE__*/React.createElement(Form.Item, {\n    label: \"Max Files\"\n  }, /*#__PURE__*/React.createElement(Input, {\n    type: \"number\",\n    value: field.max || \"\",\n    onChange: e => updateField(\"max\", e.target.value)\n  })), /*#__PURE__*/React.createElement(Form.Item, {\n    label: \"Max File Size (in MB)\"\n  }, /*#__PURE__*/React.createElement(Input, {\n    type: \"number\",\n    value: field.maxFileSize || \"\",\n    onChange: e => updateField(\"maxFileSize\", e.target.value)\n  })), /*#__PURE__*/React.createElement(Form.Item, {\n    label: \"Allowed File Types (Comma Separated)\"\n  }, /*#__PURE__*/React.createElement(Input, {\n    placeholder: \"e.g., jpg,png,pdf\",\n    value: field.fileTypes?.join(\",\") || \"\",\n    onChange: e => updateField(\"fileTypes\", e.target.value.split(\",\"))\n  }))), field.type === \"Subform\" && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Form.Item, {\n    label: \"Min Subfields\"\n  }, /*#__PURE__*/React.createElement(Input, {\n    type: \"number\",\n    value: field.min || \"\",\n    onChange: e => updateField(\"min\", e.target.value)\n  })), /*#__PURE__*/React.createElement(Form.Item, {\n    label: \"Max Subfields\"\n  }, /*#__PURE__*/React.createElement(Input, {\n    type: \"number\",\n    value: field.max || \"\",\n    onChange: e => updateField(\"max\", e.target.value)\n  }))), /*#__PURE__*/React.createElement(Form.Item, {\n    label: \"Conditions\"\n  }, /*#__PURE__*/React.createElement(Input, {\n    onChange: e => updateField(\"conditions\", e.target.value)\n  })));\n};\nfunction FormBuilder() {\n  const [applicationId, setId] = useState(() => appsmith.model?.id || null);\n  const [applicationName, setApplicationName] = useState(() => {\n    return appsmith.model.name || \"\";\n  });\n  const [status, setStatus] = useState(() => appsmith.model?.status || \"draft\");\n  const [fields, setFields] = useState(() => {\n    try {\n      return JSON.parse(appsmith.model?.json || \"[]\");\n    } catch {\n      return [];\n    }\n  });\n  const addField = (type, parentId = null) => {\n    const newField = {\n      id: `field_${Date.now()}`,\n      type,\n      ...fieldTemplates[type]\n    };\n    if (parentId) {\n      setFields(prev => prev.map(field => field.id === parentId ? {\n        ...field,\n        subfields: [...(field.subfields || []), newField]\n      } : field));\n    } else {\n      setFields([...fields, newField]);\n    }\n  };\n  const updateField = (id, key, value, parentId = null) => {\n    const update = field => field.id === id ? {\n      ...field,\n      [key]: value\n    } : field;\n    if (parentId) {\n      setFields(prev => prev.map(field => field.id === parentId ? {\n        ...field,\n        subfields: field.subfields.map(update)\n      } : field));\n    } else {\n      setFields(prev => prev.map(update));\n    }\n  };\n  const removeField = (id, parentId = null) => {\n    if (parentId) {\n      setFields(prev => prev.map(field => field.id === parentId ? {\n        ...field,\n        subfields: field.subfields.filter(f => f.id !== id)\n      } : field));\n    } else {\n      setFields(prev => prev.filter(field => field.id !== id));\n    }\n  };\n  const moveField = (index, direction, parentId = null) => {\n    if (parentId) {\n      setFields(prev => prev.map(field => {\n        if (field.id === parentId) {\n          const subfields = [...field.subfields];\n          const [movedItem] = subfields.splice(index, 1);\n          subfields.splice(index + direction, 0, movedItem);\n          return {\n            ...field,\n            subfields\n          };\n        }\n        return field;\n      }));\n    } else {\n      const reorderedFields = [...fields];\n      const [movedItem] = reorderedFields.splice(index, 1);\n      reorderedFields.splice(index + direction, 0, movedItem);\n      setFields(reorderedFields);\n    }\n  };\n  const saveForm = () => {\n    if (!applicationName.trim()) {\n      alert(\"Application Name is required.\");\n      return;\n    }\n    const json = JSON.stringify(fields, null, 2);\n\n    // Trigger a custom event to invoke the query\n    appsmith.triggerEvent(\"saveFormData\", {\n      id: applicationId,\n      name: applicationName,\n      status: status,\n      json: json\n    });\n  };\n  return /*#__PURE__*/React.createElement(Card, {\n    style: {\n      padding: \"0px\"\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      marginBottom: \"20px\"\n    }\n  }, /*#__PURE__*/React.createElement(Form.Item, {\n    label: \"Application Name\"\n  }, /*#__PURE__*/React.createElement(Input, {\n    value: applicationName,\n    onChange: e => setApplicationName(e.target.value),\n    placeholder: \"Enter application name\"\n  })), /*#__PURE__*/React.createElement(Form.Item, {\n    label: \"Status\"\n  }, /*#__PURE__*/React.createElement(Select, {\n    value: status,\n    onChange: value => setStatus(value),\n    options: [{\n      label: \"Draft\",\n      value: \"draft\"\n    }, {\n      label: \"Publish\",\n      value: \"publish\"\n    }, {\n      label: \"Hidden\",\n      value: \"hidden\"\n    }]\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      position: \"sticky\",\n      top: 0,\n      backgroundColor: \"#fff\",\n      zIndex: 10,\n      paddingBottom: \"20px\"\n    }\n  }, /*#__PURE__*/React.createElement(Select, {\n    style: {\n      width: \"200px\"\n    },\n    placeholder: \"Add Field\",\n    onSelect: type => addField(type),\n    options: Object.keys(fieldTemplates).map(type => ({\n      label: type,\n      value: type\n    }))\n  })), /*#__PURE__*/React.createElement(DragDropContext, {\n    onDragEnd: () => {}\n  }, /*#__PURE__*/React.createElement(Droppable, {\n    droppableId: \"fields\"\n  }, provided => /*#__PURE__*/React.createElement(\"div\", _extends({\n    ref: provided.innerRef\n  }, provided.droppableProps), fields.map((field, index) => /*#__PURE__*/React.createElement(\"div\", {\n    key: field.id,\n    style: {\n      marginBottom: \"10px\",\n      padding: \"10px\",\n      border: \"1px solid #ddd\",\n      borderRadius: \"5px\",\n      backgroundColor: \"#fff\"\n    }\n  }, /*#__PURE__*/React.createElement(Collapse, null, /*#__PURE__*/React.createElement(Panel, {\n    header: /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        display: \"flex\",\n        justifyContent: \"space-between\"\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", provided.dragHandleProps, `${field.type} - ${field.label}`), /*#__PURE__*/React.createElement(\"div\", null, /*#__PURE__*/React.createElement(Button, {\n      style: {\n        marginRight: \"5px\"\n      },\n      disabled: index === 0,\n      onClick: () => moveField(index, -1)\n    }, \"Move Up\"), /*#__PURE__*/React.createElement(Button, {\n      style: {\n        marginRight: \"5px\"\n      },\n      disabled: index === fields.length - 1,\n      onClick: () => moveField(index, 1)\n    }, \"Move Down\"), /*#__PURE__*/React.createElement(Button, {\n      danger: true,\n      onClick: () => removeField(field.id)\n    }, \"Remove\"))),\n    key: field.id\n  }, /*#__PURE__*/React.createElement(InputTypeSettings, {\n    field: field,\n    onUpdate: updateField\n  }), field.type === \"Subform\" && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"h5\", null, \"Subform Fields\"), field.subfields.map((subfield, subIndex) => /*#__PURE__*/React.createElement(\"div\", {\n    key: subfield.id,\n    style: {\n      marginBottom: \"10px\"\n    }\n  }, /*#__PURE__*/React.createElement(Collapse, null, /*#__PURE__*/React.createElement(Panel, {\n    header: /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        display: \"flex\",\n        justifyContent: \"space-between\"\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", null, `${subfield.type} - ${subfield.label}`), /*#__PURE__*/React.createElement(\"div\", null, /*#__PURE__*/React.createElement(Button, {\n      style: {\n        marginRight: \"5px\"\n      },\n      disabled: subIndex === 0,\n      onClick: () => moveField(subIndex, -1, field.id)\n    }, \"Move Up\"), /*#__PURE__*/React.createElement(Button, {\n      style: {\n        marginRight: \"5px\"\n      },\n      disabled: subIndex === field.subfields.length - 1,\n      onClick: () => moveField(subIndex, 1, field.id)\n    }, \"Move Down\"), /*#__PURE__*/React.createElement(Button, {\n      danger: true,\n      onClick: () => removeField(subfield.id, field.id)\n    }, \"Remove\")))\n  }, /*#__PURE__*/React.createElement(InputTypeSettings, {\n    field: subfield,\n    onUpdate: updateField,\n    parentId: field.id\n  }))))), /*#__PURE__*/React.createElement(Select, {\n    placeholder: \"Add Subfield\",\n    onSelect: type => addField(type, field.id),\n    options: Object.keys(fieldTemplates).filter(type => type !== \"Subform\").map(type => ({\n      label: type,\n      value: type\n    }))\n  })))))), provided.placeholder))), /*#__PURE__*/React.createElement(Button, {\n    type: \"primary\",\n    style: {\n      marginTop: \"20px\"\n    },\n    onClick: saveForm\n  }, \"Save Form\"));\n}\nappsmith.onReady(() => {\n  reactDom.render( /*#__PURE__*/React.createElement(FormBuilder, null), document.getElementById(\"root\"));\n});"
  },
  "theme": "{{appsmith.theme}}",
  "topRow": 7,
  "type": "CUSTOM_WIDGET",
  "uncompiledSrcDoc": {
    "css": "",
    "html": "<div id=\"root\"></div>",
    "js": "import React, { useState } from 'https://cdn.jsdelivr.net/npm/react@18.2.0/+esm';\nimport reactDom from 'https://cdn.jsdelivr.net/npm/react-dom@18.2.0/+esm';\nimport { Button, Input, Card, Form, Switch, Select, Collapse } from 'https://cdn.jsdelivr.net/npm/antd@5.11.1/+esm';\nimport { DragDropContext, Droppable, Draggable } from 'https://cdn.jsdelivr.net/npm/react-beautiful-dnd@13.1.1/+esm';\n\nconst { Panel } = Collapse;\n\n// Templates for input types\nconst fieldTemplates = {\n  \"Checkbox\": { label: \"Checkbox\", description: \"\", defaultValue: null, required: true },\n  \"Currency\": { label: \"Currency\", description: \"\", min: 0, max: null, defaultValue: 0, required: true },\n  \"Date\": { label: \"Date\", description: \"\", min: null, max: null, defaultValue: null, required: true },\n  \"Time\": { label: \"Time\", description: \"\", min: null, max: null, defaultValue: null, required: true },\n  \"Email\": { label: \"Email\", description: \"\", regex: \"\", defaultValue: null, required: true },\n  \"Multiselect Dropdown\": { label: \"Multiselect Dropdown\", options: [\"Option 1\", \"Option 2\"], defaultValue: null, required: true },\n  \"Multi-line Text\": { label: \"Multi-line Text\", description: \"\", defaultValue: null, required: true },\n  \"Number\": { label: \"Number\", description: \"\", min: 0, max: null, defaultValue: null, regex: \"\", required: true },\n  \"Password\": { label: \"Password\", description: \"\", required: true },\n  \"Phone Number\": { label: \"Phone\", description: \"\", required: true },\n  \"Radio Button\": { label: \"Radio Button\", options: [\"Option 1\", \"Option 2\"], defaultValue: null, required: true },\n  \"Select Dropdown\": { label: \"Select Dropdown\", options: [\"Option 1\", \"Option 2\"], defaultValue: null, required: true },\n  \"Single-line Text\": { label: \"Single-line Text\", description: \"\", regex: \"\", defaultValue: null, required: true },\n  \"Subform\": { label: \"Subform\", min: 1, max: null, subfields: [] },\n  \"File Upload\": { label: \"File Upload\", description: \"\", min: 0, max: null, maxFileSize: null, fileTypes: [], required: true },\n  \"URL\": { label: \"URL\", description: \"\", regex: \"\", defaultValue: null, required: true },\n  \"Title\": { label: \"Title\", description: \"\", required: false },\n  \"Custom Code\": { label: \"Custom Code\", description: \"\", code: \"\", required: false },\n};\n\nconst InputTypeSettings = ({ field, onUpdate, parentId }) => {\n  const updateField = (key, value) => onUpdate(field.id, key, value, parentId);\n\n  return (\n    <>\n      <Form.Item label=\"Label\">\n        <Input\n          value={field.label}\n          onChange={(e) => updateField(\"label\", e.target.value)}\n        />\n      </Form.Item>\n      <Form.Item label=\"Description\">\n        <Input.TextArea\n          value={field.description || \"\"}\n          onChange={(e) => updateField(\"description\", e.target.value)}\n        />\n      </Form.Item>\n      <Form.Item label=\"Required\">\n        <Switch\n          checked={field.required}\n          onChange={(checked) => updateField(\"required\", checked)}\n        />\n      </Form.Item>\n\n      {/* Handle Default Value */}\n      {[\"Number\", \"Currency\", \"Single-line Text\", \"Email\", \"Checkbox\", \"Radio Button\", \"Select Dropdown\", \"Multiselect Dropdown\"].includes(field.type) && (\n        <Form.Item label=\"Default Value\">\n          <Input\n            type={\n              [\"Number\", \"Currency\"].includes(field.type) ? \"number\" : \"text\"\n            }\n            value={field.defaultValue || \"\"}\n            onChange={(e) => updateField(\"defaultValue\", e.target.value)}\n          />\n        </Form.Item>\n      )}\n\n      {[\"Date\", \"Time\"].includes(field.type) && (\n        <Form.Item label=\"Default Value\">\n          <Input\n            type={\n              [\"Date\"].includes(field.type) ? \"date\" : \"time\"\n            }\n            value={field.defaultValue || \"\"}\n            onChange={(e) => updateField(\"defaultValue\", e.target.value)}\n          />\n        </Form.Item>\n      )}\n\n      {/* Advanced Fields for Min and Max */}\n      {[\"Number\", \"Currency\", \"Date\", \"Time\"].includes(field.type) && (\n        <>\n          <Form.Item label=\"Min Value\">\n            <Input\n              type={\n                field.type === \"Date\"\n                  ? \"date\"\n                  : field.type === \"Time\"\n                  ? \"time\"\n                  : \"number\"\n              }\n              value={field.min || \"\"}\n              onChange={(e) => updateField(\"min\", e.target.value)}\n            />\n          </Form.Item>\n          <Form.Item label=\"Max Value\">\n            <Input\n              type={\n                field.type === \"Date\"\n                  ? \"date\"\n                  : field.type === \"Time\"\n                  ? \"time\"\n                  : \"number\"\n              }\n              value={field.max || \"\"}\n              onChange={(e) => updateField(\"max\", e.target.value)}\n            />\n          </Form.Item>\n        </>\n      )}\n\n      {/* Specific to Custom Code */}\n      {field.type === \"Custom Code\" && (\n        <Form.Item label=\"Custom Code\">\n          <Input.TextArea\n            rows={5}\n            placeholder=\"Enter your custom code here\"\n            value={field.code || \"\"}\n            onChange={(e) => updateField(\"code\", e.target.value)}\n          />\n        </Form.Item>\n      )}\n\n      {/* Regex Support */}\n      {[\"Email\", \"Single-line Text\", \"Number\", \"URL\"].includes(field.type) && (\n        <Form.Item label=\"Regex\">\n          <Input\n            value={field.regex || \"\"}\n            onChange={(e) => updateField(\"regex\", e.target.value)}\n          />\n        </Form.Item>\n      )}\n\n      {/* Options for Dropdowns, Radio Button, Checkbox */}\n      {[\"Select Dropdown\", \"Multiselect Dropdown\", \"Radio Button\", \"Checkbox\"].includes(field.type) && (\n        <Form.Item label=\"Options (Comma Separated)\">\n          <Input\n            value={field.options?.join(\",\") || \"\"}\n            onChange={(e) =>\n              updateField(\"options\", e.target.value.split(\",\"))\n            }\n          />\n        </Form.Item>\n      )}\n\n      {/* File Upload Settings */}\n      {field.type === \"File Upload\" && (\n        <>\n          <Form.Item label=\"Min Files\">\n            <Input\n              type=\"number\"\n              value={field.min || \"\"}\n              onChange={(e) => updateField(\"min\", e.target.value)}\n            />\n          </Form.Item>\n          <Form.Item label=\"Max Files\">\n            <Input\n              type=\"number\"\n              value={field.max || \"\"}\n              onChange={(e) => updateField(\"max\", e.target.value)}\n            />\n          </Form.Item>\n          <Form.Item label=\"Max File Size (in MB)\">\n            <Input\n              type=\"number\"\n              value={field.maxFileSize || \"\"}\n              onChange={(e) => updateField(\"maxFileSize\", e.target.value)}\n            />\n          </Form.Item>\n          <Form.Item label=\"Allowed File Types (Comma Separated)\">\n            <Input\n              placeholder=\"e.g., jpg,png,pdf\"\n              value={field.fileTypes?.join(\",\") || \"\"}\n              onChange={(e) =>\n                updateField(\"fileTypes\", e.target.value.split(\",\"))\n              }\n            />\n          </Form.Item>\n        </>\n      )}\n\n      {/* Subform Specific Settings */}\n      {field.type === \"Subform\" && (\n        <>\n          <Form.Item label=\"Min Subfields\">\n            <Input\n              type=\"number\"\n              value={field.min || \"\"}\n              onChange={(e) => updateField(\"min\", e.target.value)}\n            />\n          </Form.Item>\n          <Form.Item label=\"Max Subfields\">\n            <Input\n              type=\"number\"\n              value={field.max || \"\"}\n              onChange={(e) => updateField(\"max\", e.target.value)}\n            />\n          </Form.Item>\n        </>\n      )}\n\n      <Form.Item label=\"Conditions\">\n        <Input\n          onChange={(e) => updateField(\"conditions\", e.target.value)}\n        />\n      </Form.Item>\n    </>\n  );\n};\n\nfunction FormBuilder() {\n\n\tconst [applicationId, setId] = useState(() => appsmith.model?.id || null);\n  const [applicationName, setApplicationName] = useState(() => {\n\t\treturn appsmith.model.name || \"\";\n\t});\n\tconst [status, setStatus] = useState(() => appsmith.model?.status || \"draft\");\n\tconst [fields, setFields] = useState(() => {\n\t\ttry {\n\t\t\treturn JSON.parse(appsmith.model?.json || \"[]\");\n\t\t} catch {\n\t\t\treturn [];\n\t\t}\n\t});\n\n  const addField = (type, parentId = null) => {\n    const newField = {\n      id: `field_${Date.now()}`,\n      type,\n      ...fieldTemplates[type],\n    };\n    if (parentId) {\n      setFields((prev) =>\n        prev.map((field) =>\n          field.id === parentId\n            ? { ...field, subfields: [...(field.subfields || []), newField] }\n            : field\n        )\n      );\n    } else {\n      setFields([...fields, newField]);\n    }\n  };\n\n  const updateField = (id, key, value, parentId = null) => {\n    const update = (field) =>\n      field.id === id ? { ...field, [key]: value } : field;\n\n    if (parentId) {\n      setFields((prev) =>\n        prev.map((field) =>\n          field.id === parentId\n            ? { ...field, subfields: field.subfields.map(update) }\n            : field\n        )\n      );\n    } else {\n      setFields((prev) => prev.map(update));\n    }\n  };\n\n  const removeField = (id, parentId = null) => {\n    if (parentId) {\n      setFields((prev) =>\n        prev.map((field) =>\n          field.id === parentId\n            ? { ...field, subfields: field.subfields.filter((f) => f.id !== id) }\n            : field\n        )\n      );\n    } else {\n      setFields((prev) => prev.filter((field) => field.id !== id));\n    }\n  };\n\n  const moveField = (index, direction, parentId = null) => {\n    if (parentId) {\n      setFields((prev) =>\n        prev.map((field) => {\n          if (field.id === parentId) {\n            const subfields = [...field.subfields];\n            const [movedItem] = subfields.splice(index, 1);\n            subfields.splice(index + direction, 0, movedItem);\n            return { ...field, subfields };\n          }\n          return field;\n        })\n      );\n    } else {\n      const reorderedFields = [...fields];\n      const [movedItem] = reorderedFields.splice(index, 1);\n      reorderedFields.splice(index + direction, 0, movedItem);\n      setFields(reorderedFields);\n    }\n  };\n\n  const saveForm = () => {\n    if (!applicationName.trim()) {\n      alert(\"Application Name is required.\");\n      return;\n    }\n  \n    const json = JSON.stringify(fields, null, 2);\n  \n    // Trigger a custom event to invoke the query\n    appsmith.triggerEvent(\"saveFormData\", {\n\t\t\tid: applicationId,\n      name: applicationName,\n      status: status,\n      json: json,\n    });\n  };  \n\n  return (\n    <Card style={{ padding: \"0px\" }}>\n      <div style={{ marginBottom: \"20px\" }}>\n        <Form.Item label=\"Application Name\">\n          <Input\n            value={applicationName}\n            onChange={(e) => setApplicationName(e.target.value)}\n            placeholder=\"Enter application name\"\n          />\n        </Form.Item>\n        <Form.Item label=\"Status\">\n          <Select\n            value={status}\n            onChange={(value) => setStatus(value)}\n            options={[\n              { label: \"Draft\", value: \"draft\" },\n              { label: \"Publish\", value: \"publish\" },\n              { label: \"Hidden\", value: \"hidden\" },\n            ]}\n          />\n        </Form.Item>\n      </div>\n\n      <div style={{ position: \"sticky\", top: 0, backgroundColor: \"#fff\", zIndex: 10, paddingBottom: \"20px\" }}>\n        <Select\n          style={{ width: \"200px\" }}\n          placeholder=\"Add Field\"\n          onSelect={(type) => addField(type)}\n          options={Object.keys(fieldTemplates).map((type) => ({ label: type, value: type }))}\n        />\n      </div>\n\n      <DragDropContext onDragEnd={() => {}}>\n        <Droppable droppableId=\"fields\">\n          {(provided) => (\n            <div ref={provided.innerRef} {...provided.droppableProps}>\n              {fields.map((field, index) => (\n                <div\n                  key={field.id}\n                  style={{\n                    marginBottom: \"10px\",\n                    padding: \"10px\",\n                    border: \"1px solid #ddd\",\n                    borderRadius: \"5px\",\n                    backgroundColor: \"#fff\",\n                  }}\n                >\n                  <Collapse>\n                    <Panel\n                      header={\n                        <div style={{ display: \"flex\", justifyContent: \"space-between\" }}>\n                          <span {...provided.dragHandleProps}>{`${field.type} - ${field.label}`}</span>\n                          <div>\n                            <Button\n                              style={{ marginRight: \"5px\" }}\n                              disabled={index === 0}\n                              onClick={() => moveField(index, -1)}\n                            >\n                              Move Up\n                            </Button>\n                            <Button\n                              style={{ marginRight: \"5px\" }}\n                              disabled={index === fields.length - 1}\n                              onClick={() => moveField(index, 1)}\n                            >\n                              Move Down\n                            </Button>\n                            <Button danger onClick={() => removeField(field.id)}>\n                              Remove\n                            </Button>\n                          </div>\n                        </div>\n                      }\n                      key={field.id}\n                    >\n                      <InputTypeSettings field={field} onUpdate={updateField} />\n                      {field.type === \"Subform\" && (\n                        <>\n                          <h5>Subform Fields</h5>\n                          {field.subfields.map((subfield, subIndex) => (\n                            <div key={subfield.id} style={{ marginBottom: \"10px\" }}>\n                              <Collapse>\n                                <Panel\n                                  header={\n                                    <div style={{ display: \"flex\", justifyContent: \"space-between\" }}>\n                                      <span>{`${subfield.type} - ${subfield.label}`}</span>\n                                      <div>\n                                        <Button\n                                          style={{ marginRight: \"5px\" }}\n                                          disabled={subIndex === 0}\n                                          onClick={() => moveField(subIndex, -1, field.id)}\n                                        >\n                                          Move Up\n                                        </Button>\n                                        <Button\n                                          style={{ marginRight: \"5px\" }}\n                                          disabled={subIndex === field.subfields.length - 1}\n                                          onClick={() => moveField(subIndex, 1, field.id)}\n                                        >\n                                          Move Down\n                                        </Button>\n                                        <Button danger onClick={() => removeField(subfield.id, field.id)}>\n                                          Remove\n                                        </Button>\n                                      </div>\n                                    </div>\n                                  }\n                                >\n                                  <InputTypeSettings field={subfield} onUpdate={updateField} parentId={field.id} />\n                                </Panel>\n                              </Collapse>\n                            </div>\n                          ))}\n                          <Select\n                            placeholder=\"Add Subfield\"\n                            onSelect={(type) => addField(type, field.id)}\n                            options={Object.keys(fieldTemplates)\n                              .filter((type) => type !== \"Subform\")\n                              .map((type) => ({ label: type, value: type }))}\n                          />\n                        </>\n                      )}\n                    </Panel>\n                  </Collapse>\n                </div>\n              ))}\n              {provided.placeholder}\n            </div>\n          )}\n        </Droppable>\n      </DragDropContext>\n\n      <Button\n        type=\"primary\"\n        style={{ marginTop: \"20px\" }}\n        onClick={saveForm}\n      >\n        Save Form\n      </Button>\n    </Card>\n  );\n}\n\nappsmith.onReady(() => {\n  reactDom.render(<FormBuilder />, document.getElementById(\"root\"));\n});"
  },
  "version": 1,
  "widgetId": "qhynb35xu3",
  "widgetName": "Form_Builder"
}